//
//  SyntacticalAnalyzer.swift
//  lfac
//
//  Created by Luiz Araujo on 17/06/24.
//

import Foundation

final class SyntacticalAnalyzer {
    // MARK: - Properties
    
    /// Tokens
    private var tokens: [PToken]
    
    /// States
    private var currentTokenIndex: Int


    internal init(tokens: [PToken], currentTokenIndex: Int = 0) {
        self.tokens = tokens
        self.currentTokenIndex = currentTokenIndex
    }


    // MARK: - Methods
    func analyze() throws {
        try programa()

        nextSymbol()
        try bloco()


    }

    func getNextSymbol() -> PToken {
        currentTokenIndex += 1
        return tokens[currentTokenIndex]
    }

    func nextSymbol() {
        currentTokenIndex += 1
    }

//    func handleKeyword(keyword: PToken) {
//        do {
//            switch keyword.value {
//            case "program":
//                try programa()
//
//            case "var":
//                try parteDeDeclaracoesDeVariaveis()
//
//            default:
//                break
//            }
//
//        } catch {
//            self.printError(error)
//        }
//    }


    // MARK: - Programa e Bloco

    /// <programa> ::=
    ///     ‚Ä®program <identificador> ; <bloco> .
    func programa() throws {
        guard getNextSymbol().type == .identifiers else {
            throw ErrorState.i1
        }

        guard getNextSymbol().type == .terminators else {
            throw ErrorState.t1
        }

        guard getNextSymbol().value == ";" else {
            throw ErrorState.t2
        }

        print("program correto.")
    }

    /// <bloco> ::=
    ///     ‚Ä®<parte de declara√ß√µes de vari√°veis> 
    ///     ‚Ä®<parte de declara√ß√µes de procedimentos>
    ///     ‚Ä®<comando composto>
    func bloco() throws {
        nextSymbol()
        try parteDeDeclaracoesDeVariaveis()

        nextSymbol()
        try comandoComposto()

        nextSymbol()
        guard tokens[currentTokenIndex].value == "." else {
            throw ErrorState.t3
        }

        guard currentTokenIndex == tokens.count - 1 else {
            throw ErrorState.f1
        }

        print("Bloco de c√≥digo livre de erros")
    }


    // MARK: - Declara√ß√µes
    /// <parte de declara√ß√µes de vari√°veis> ::=
    ///     <vazio> |
    ///     ‚Ä®var <declara√ß√£o de vari√°veis>;
    ///     ‚Ä®{ <declara√ß√£o de vari√°veis>; }
    func parteDeDeclaracoesDeVariaveis() throws {
        guard tokens[currentTokenIndex].value == "var" else {
            /// empty, vazio, n√£o tem declara√ß√µes no c√≥digo
            return
        }

        nextSymbol()
        while tokens[currentTokenIndex].type == .identifiers {
            try declaracaoDeVariaveis()
            nextSymbol()
        }
    }

    /// <declara√ß√£o de vari√°veis> ::=
    ///     ‚Ä®<identificador>{,<identificador>} : <tipo>
    ///     ‚Ä®var sum: integer;
    func declaracaoDeVariaveis() throws {
        guard tokens[currentTokenIndex].type == .identifiers else {
            throw ErrorState.d1
        }

        nextSymbol()
        while tokens[currentTokenIndex].value == "," {
            nextSymbol()

            guard tokens[currentTokenIndex].type == .identifiers else {
                throw ErrorState.d2
            }

            nextSymbol()
        }

        guard tokens[currentTokenIndex].value == ":" else {
            throw ErrorState.d3
        }

        nextSymbol()
        try tipo()

        nextSymbol()
        guard tokens[currentTokenIndex].value == ";" else {
            throw ErrorState.t4
        }
    }

    /// <lista de identificadores> ::= 
    ///     ‚Ä®<identificador> { , <identificador> }
    func listaDeIdentificadores() throws {

    }

    /// <tipo> ::=
    ///     integer  | real | boolean
    func tipo() throws {
        guard tokens[currentTokenIndex].type == .integers || tokens[currentTokenIndex].type == .reals || tokens[currentTokenIndex].type == .booleans else {
            throw ErrorState.e8
        }
    }

//    /// <declara√ß√£o de procedimento> ::=
//    ///     ‚Ä®{ procedure <identificador> [ <par√¢metros formais>] ; <bloco> }
//    func declarationProcedure() throws {
//
//    }
//
//    /// <par√¢metros formais> ::=
//    ///     ‚Ä®( <se√ß√£o de par√¢metros formais> { ; <se√ß√£o de par√¢metros formais>} )
//    func declarationFormalParameter() throws {
//
//    }
//
//    /// <se√ß√£o de par√¢metros formais> ::=
//    ///     ‚Ä®{ var } <lista de identificadores> : <tipo>
//    func declarationFormalParameterSection() throws {
//
//    }


    // MARK: - Comandos
    /// <comando composto> ::= 
    ///     ‚Ä®begin <comando> { ; <comando> } end
    func comandoComposto() throws {

    }

    /// <comado> ::=
    ///     ‚Ä®<atribui√ß√£o> | <chamada de procedimento> | <comando composto> | <comando condicional 1>‚Ä®| <comando repetitivo 1>
    func comando() throws {

    }

    /// <atribui√ß√£o> ::= 
    ///     ‚Ä®<vari√°vel> := <express√£o>
    func atribuicao() throws {

    }

//    /// <chamada de procedimento> ::=
//    ///     ‚Ä®<identificador> [ ( <lista de express√µes> ) ]
//    func commandProcedureCall() throws {
//
//    }

    /// <comando condicional 1> ::=
    ///     ‚Ä®if <express√£o> then <comando> [ else <comando> ]
    func comandoCondicional() throws {

    }

    /// <comando repetitivo 1> ::=
    ///     ‚Ä®while <express√£o> do <comando>
    func comandoRepetitivo() throws {

    }


    // MARK: - Express√µes

    /// <express√£o> ::=
    ///     ‚Ä®<express√£o simples> [ <rela√ß√£o> <express√£o simples> ]
    func expressao() throws {

    }

    /// <rela√ß√£o> ::=
    ///     ‚Ä®= | <> | < | <= | >= | >
    func relacao() throws {

    }

    /// <express√£o simples> ::=
    ///     ‚Ä®[ + | - ] <termo> { ( + | - | or ) <termo> }
    func expressaoSimples() throws {

    }

    /// <termo> ::=
    ///     ‚Ä®<fator> { ( * | / | div | and ) <fator> }
    func termo() throws {

    }

    /// <fator> ::=
    ///     ‚Ä®<vari√°vel> | <n√∫mero> | ( <express√£o> ) | not <fator>
    func fator() throws {

    }

    /// <vari√°vel> ::=
    ///     ‚Ä®<identificador>
    func variavel() throws {
        guard tokens[currentTokenIndex].type == .identifiers else {
            throw ErrorState.i1
        }
    }

    /// <lista de express√µes> ::=
    ///     ‚Ä®<express√£o> { , <express√£o> }
    func listaDeExpressoes() throws {

    }
}

// MARK: - HELPERS
extension SyntacticalAnalyzer {
    func printError(_ error: Error) {
        let token = tokens[currentTokenIndex]

        print("üö® ERRO ENCONTRADO üö®")
        print("LINHA : \(token.line)")
        print("COLUNA: \(token.column)")
        print(error.localizedDescription)
    }
}
